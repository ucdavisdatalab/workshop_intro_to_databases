[["index.html", "An Overview of Databases and Data Storage Technologies Overview You might need a database if… Learning Goals", " An Overview of Databases and Data Storage Technologies Elise Hellwig 2024-02-07 Overview This workshop provides a broad overview of the various technologies for storing and organizing different collections of data. We will discuss how data structure and data types impact your storage options, when you should use a database, and which platforms you might consider for your research. This workshop is a general lecture with case studies and Q&amp;A (no laptops necessary). This workshop is a prerequisite for DataLab’s Intro to SQL for Querying Databases workshop and part of the Research Computing micro-credential You might need a database if… Your data set has many repeated values in its columns Your data set contains information about many unrelated or loosely related studies You are sharing data with multiple people and everyone seems to have a different version Your data set is so large, your computer freezes when trying to view it You have to keep making the same corrections to your data over and over again Excel keeps converting your columns to the wrong data type You have so many pivot tables You have hundreds (or thousands) of data files you need to share with your collaborators You think PowerQuery is neat but wish people would stop changing the underlying data while you are using it. Learning Goals By the end of this workshop, learners should be able to: Describe different data set structures Compare and contrast different data storage platforms Explain the differences between SQL and noSQL databases Explain the components of an Entity Relationship Diagram (ERD) Define relational keys Identify appropriate data storage solutions based on the structure of a research data set "],["data.html", "1 Data 1.1 Data Types 1.2 Data Structures 1.3 Picking a Data Structure", " 1 Data Quantities, characters, or symbols on which operations are performed by a computer, considered collectively. Also (in non-technical contexts): information in digital form. - Oxford English Dictionary If you are doing research, chances are you are going to be working with data in some form or another. Even if you do not use the traditional rows and columns people most often associate with “data”, you certainly working with information that has been translated into a form that is more easily shared or stored for later use, aka data. One of the challenges of working with data is figuring out the best way, or at least a good way, to store it. Thankfully, we have mostly left the 20th century’s favorite way of storing data: paper in filing cabinets. Our new methods are definitely less flammable but but also can have a higher barrier to entry. There are also a greater variety in types of data stores, which means you need to make a decision on which one to use. Ultimately, the best way to store your data will depend on the data you want to store, specifically the data type and structure. 1.1 Data Types Your data’s type tells the computer what sorts of operations make sense to do with it. Common data types include integers, decimal or floating point numbers, characters (text), Boolean values (TRUE and FALSE) and date/times. Data type also influences how data is stored. Unlike other characteristics we will discuss later, an individual data point can have a type. Data type is not necessarily inherent to a piece of information, though it is often strongly suggested. For example, you can store the value of 1 as the integer 1, the decimal 1.0, the text “1”, the Boolean TRUE, or the date 1900-01-01 00:00:00. The underlying information is the same (1), but the computer will treat each of these pieces of data differently. It will not allow you to add “1” to another number, and it may have issues combining the integer or decimal 1.0 with text. Text itself can only be stored as characters. 1.2 Data Structures A data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data. Wikipedia Unlike with data types, a single piece of data cannot have a data structure. This is because data structure is about capturing relationships between data points, there isn’t any meaningful information to be gained from the relationship of a data point with itself. There are five basic data structures: tabular/columnar, graph, tree, categorical/relational, and spatial data. In practice, data often exhibits traits from multiple data structures. As mentioned previously, data is information translated into a form to store for later use. The data structure that you use to represent your information is not necessarily inherent in that information. However, some types of information lend themselves to particular data structures over others. When trying to decide what data structure to use to represent information from your research, the key is to focus on what sorts of questions you would like to ask. Each data structure will make some types of questions easier to ask and others harder. If you want to ask disparate types of questions, you may need to represent your data using multiple structures. 1.2.1 Columnar/Tabular Tabular or columnar data is made up of rows and columns, collectively referred to as a table. Each row represents an observation, and each column a measurement or aspect of that observation. In the table below, each row is an observation of a car model released in 1978. ## Empty data.table (0 rows and 7 cols): make,model,mpg,cylinders,horsepower,weight... 1.2.2 Graph Graph data structure explicitly captures between entities. In graphs, relationships are defined by position and distance. Relationships can be directional 1.2.3 Tree Tree data is very similar to graph data in many ways. Trees also explicitly capture relationships between entities. However, in trees the relationships are hierarchical. The number of nodes separating an entity from a common root defines that entity’s place in the hierarchy. This is also 1.2.4 Categorical - Relational In categorical data, category membership is the organizing principle of the data structure. Entities can have membership in multiple categories, and relationships are defined between categories instead of the entities themselves. As such, relationships tend to represent complex processes rather than individual entities. 1.2.5 Spatial In spatial data, the organizing principle is location. This can be geographic location (ex latitude/longitude) or relative location on an arbitrary grid (ex. [2, 4]) 1.3 Picking a Data Structure As mentioned previously, data represents information from the real world. And all information in the real world can be thought of in a larger context, like zooming out with a camera lens. You can use this context to identify the best structure to use for your data. If you view your data as observation of some larger phenomenon, tabular data could be a good fit. If you are more concerned about how various entities relate to each other in the context of your research, a graph may be more appropriate. Additionally, many research questions are complex enough that one data structure on its own may not be sufficient to capture all the information necessary to answer the question. It it is very common to combine data structures to capture more information that one could on its own. Most observation based data sets are actually a combination of tabular data and categorical - relational data, which captures information about the relationships between observations. Phylogenetic trees, the data structure most commonly used in the study of evolution, is a combination of the graph and tree data structures. "],["data-stores.html", "2 Data Stores 2.1 Principles of Data Storage 2.2 Data Store Vocabulary 2.3 Types of Data Stores 2.4 Spreadsheets 2.5 Relational Database Management System 2.6 NoSQL Databases", " 2 Data Stores A data store is repository for persistently storing and managing collections of data which include not just repositories like databases, but also simpler store types such as simple files, emails etc. Wikipedia A data store is a repository for storing and managing data, generally speaking digitally. Though you could argue that a things like a filing cabinet or a library qualify as analog data stores. Data stores have two primary functions. First, they need to facilitate people accessing data from the data store (reading) and making changes to the data in the data store (writing). Second, they need to preserve this access over a period of time. It is important to note, not all data stores are databases. A pile of papers on a desk is definitely not a database, but it could be considered a data store, albeit a bad one. 2.1 Principles of Data Storage When you are trying to decide what type of data storage to use, consider these ideas: All data has an inherent structure. Different data structures facilitate different research questions. All data stores impose an underlying data structure. The best data storage technology for any research question matches the structure of the data with the structure of the data store. 2.2 Data Store Vocabulary There are a few concepts that will be useful when describing types of data stores and comparing their functionality. 2.2.1 Transaction A transaction is a unit of work within a database. Any time you change a database, either by adding, removing or modifiying data, you are completing a transaction. Extracting data from a database is also a transaction. 2.2.2 Normalization Data normalization is the process of organizing data in a database in a way that reduces the database’s size. It the organization structure also protects against typos and other data quality issues from sneaking in. In general, data normalization will break one group of data into multiple groups. 2.2.3 Join While it is much easier to store normalized data, most data analysis will require you to work with data in a non-normalized form. A data join reverses the normalization process. It takes multiple groups of data and combines them into one. 2.2.4 Scaling As you add data to a data store, you may need to add computing resources to the data store to maintain your data store’s performance. 2.2.4.1 Horizontal Scaling Horizontal scaling is like urban sprawl. It involves adding more individual computers, servers, or nodes to the database. Because you don’t have to muck around with upgrading already existing computers, it is easier to implement. Additionally, there is no theoretical limit on the number of servers you could add to your database. However, having multiple servers running the same database does increase complexity and ongoing support costs. 2.2.4.2 Vertical Scaling Vertical scaling is like building a high rise apartment. It involves adding computing resources (memory, storage) to a single computer or server. It tends to be more difficult and expensive than horizontal scaling at the outset, but system complexity and ongoing costs stay relatively constant. Additionally, there is a limit to how much you can upgrade a single machine, so at a certain point you may need to replace the hardware all together. 2.3 Types of Data Stores 2.4 Spreadsheets Spreadsheets are one of the most, if not the most, ubiquitous form of (digital) data store. If you have used Microsoft Excel or Google Sheets, you have used a a spreadsheet. In fact spreadsheet applications transformed the use of the personal computer, particularly in business circles. Despite this, a spreadsheet is not a database. Like most modern applications, spreadsheet software have graphical user interfaces, making the barrier to entry very low. Spreadsheet applications also offer some built in analysis tools, so you don’t have to learn a new application to do basic statistics and data visualization. However, spreadsheets suffer from some severe limitations. They offer limited storage capacity, don’t have normalization capabilities, so your data takes up even more space than it would otherwise. The lack of normalization means it is easy to compromise data integrity and end up with ____ (ex. yes, Yes, and YES coded as different responses). There is also no way to independently scale up computing resources for a spreadsheet application. Finally, most spreadsheet applications store their data locally, so unless you are militant about version control outside of the application, it is easy to end up with people working on multiple versions of the data. Google Sheets offers shared access and some version control, but still fails to deliver on storage capacity, resource scaling, and data integrity. 2.4.1 Examples Microsoft Excel Google Sheets Numbers LibreOffice Calc OpenRefine Open Science Framework 2.5 Relational Database Management System Relational Database Management Systems (RDBMSs), or relational databases informally, are one type of database. When people use the word “database”, nine times out of ten they are referring to a relational database. Like spreadsheets, RDBMSs impose a structure on the data they contain. Unlike spreadsheets the structure of that data can be fairly complicated. Relational databases are made up of tables that are connected through shared columns, called indexes or keys. Users interact with an RDBMS through SQL, which stands for structured query language. SQL allows you to standardize your interactions with a database. It gives you a log of the transactions to ___, and makes it easy to ensure everyone is working with the same set of data. To learn more about using SQL in practice, check out the Intro to SQL and Spatial SQL readers. There are three primary purposes to using RDBMSs as a data store: Reduce data duplication Speed up accessing and updating the database Ensure data integrity 2.5.1 Transactions are ACID In relational databases, all transactions must adhere to a given set of rules. These rules are abbreviated as ACID. Atomic - Transactions cannot be broken down into sub-steps. They are all or nothing. If one part of the transaction fails, the whole transaction is canceled. This ensures that the data is always valid. Consistent - All of the structural rules of the database must be obeyed before and after each transaction. If a column in a table has a particular type, every element in that column must have the same type at the end of each transaction. Isolated - Transactions only happen simultaneously if they do not interact. Otherwise the database executes transactions on a first come first serve basis. This means if two users want to modify the same table, the user who submitted their transaction first will modify the original table, and the user who submitted their transaction second will modify the modified table. If the if second transaction doesn’t work with the modified table, it will fail and the user will have to resubmit the transaction to reflect the new information in the table. Durable - Changes to the database are permanent and will stay in place even after a system failure. There is no dialog box asking if you are sure you want to overwrite your data, so BE CAREFUL. 2.5.2 Relationship keys A relationship key is a column or pair of columns that links two tables. There are two types of relationship keys: primary keys and foreign keys. A primary key is a column that uniquely identifies each row in a particular table. It is generally the first column in the table and is often named “ID”. A foreign key is a column in one table whose values correspond to a primary key in another table. 2.5.3 Entity Relationship Diagrams Since relational databases are not human readable, it can be helpful to have a an visual summary of the database without actually needing to look at the data. That is where Entity Relationship Diagrams (ERDs) come in. ERDs are a standardized way to depict the structure of a relational database. Each box in the diagram is a table, with the table title at the top and the column names listed below it. The column type appears next to each column name. The Primary/foreign key pairs are linked in entity relationship diagrams using connector lines. These lines specify which tables can be joined, and which keys should be used to join them. They also can specify what type of relationship the two tables have. The most common type of table relationship in relational databases is the one-to-many relationship. In this case, one row in table A may be linked to many rows in table B. This is the case for the relationship between the ____ and ____ tables in the UC Davis Library Database. One-to-one relationships are also fairly common in relational databases. Two tables are one-to-one when one observation in table A only corresponds to one observation in table B. This is the relationship between ____ and ____ in the UC Davis Library Database. As you might guess, there is a third type of relationship: many-to-many. Many-to-many relationships are the sleeping giant of database relationships. They can be very useful, but if you are not careful, they can multiply the size of your data several times over. 2.5.4 Pros and Cons of RDBMS Pros Cons Supports ACID Transactions Only vertical scaling Supports normalization and joins Joins mean loss of speed Captures relationships with defined constraints Requires an administrator of some sort Data integrity through normalization and types Data is not human readable Unlimited indexing Pre-defined data model Robust query language (SQL) Lots of software options (some free) 2.5.5 Examples Microsoft SQL Server PostgreSQL MySQL SQLite Amazon Redshift 2.6 NoSQL Databases Not Only SQL, or NoSQL, databases are another type of database. They are primarily defined by what they do not do, namely store data in relational tables, as a RDBMSs would. Instead, NoSQL databases do not necessarily impose external structure on the data they contain. In fact, NoSQL databases can contain data from multiple structures, including documents key-value pairs graphs trees wide column tables Because of this, NoSQL databases are much better at storing tree and graph data, as those data structures do not fit well into relational tables. 2.6.1 Transactions are BASE The NoSQL databases do not have built-in assumptions about structure, they cannot guarantee strictly ACID transactions. However, unlike spreadsheets, they do follow a less rigorous set of rules abbreviated as BASE. This less stringent set of rules requires much less computing overhead and makes scaling easier. Basically Available - Users can interact with the database concurrently. transactions are not isolated like in relational databases, so you will not be locked out part of the database. Soft state - Transactions do not have to maintain consistency. There can be intermediate steps that are not compliant. Additionally, internal replicates of the data may not always be identical. Eventually consistent - While the database may not always be consistent, it will get there eventually. 2.6.2 Pros and Cons Pros Cons Works with semi- and unstructured data BASE (not ACID) Horizontal scaling Data is not normalized Data structure is not predetermined Limited support for joins and indexing Very fast Slow indexing Supports different kinds of fields Weak SQL High availability No built in data integrity support 2.6.3 Examples MongoDB DocumentDB Cassandra Coachbase HBase Redis Neo4J Lucene ArangoDB "],["choosing-the-right-data-store.html", "3 Choosing the Right Data Store 3.1 CAP Theorem 3.2 Polyglot Persistance", " 3 Choosing the Right Data Store 3.1 CAP Theorem 3.2 Polyglot Persistance "],["assessment.html", "4 Assessment", " 4 Assessment "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
